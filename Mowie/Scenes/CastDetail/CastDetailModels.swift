//
//  CastDetailModels.swift
//  Mowie
//
//  Created by Turan Yilmaz on 22.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum CastDetail {
    // MARK: Use cases
    
    enum GetCast {
        struct Request: RequestProtocol {
            var url: URL?
            
            init(castId: Int) {
                url = ServiceURL.castDetail(castId: castId).url
            }
        }
        
        struct Response: Codable {
            let id: Int?
            let birthday: String?
            let name: String?
            let biography: String?
            let homeTown: String?
            let profileImage: String?
            let movieCredits: MovieCredits?
            let tvCredits: TVCredits?
            let externalIds: ExternalIDS?
            
            private enum CodingKeys: String, CodingKey {
                case id
                case birthday
                case name
                case biography
                case homeTown = "place_of_birth"
                case profileImage = "profile_path"
                case movieCredits = "movie_credits"
                case tvCredits = "tv_credits"
                case externalIds = "external_ids"
            }
        }
        
        struct ViewModel {
            let listViewModel: ListViewModel?
        }
    }
    
    struct SelectedCast {
        let id: Int?
        let name: String?
    }
}

struct MovieCredits: Codable {
    let cast: [Items.Movie.MovieItem]
}

struct TVCredits: Codable {
    let cast: [Items.TV.TVItem]
}

struct ExternalIDS: Codable {
    let facebookID, instagramID, imdbID, twitterID: String?
    
    private enum CodingKeys: String, CodingKey {
        case imdbID = "imdb_id"
        case facebookID = "facebook_id"
        case instagramID = "instagram_id"
        case twitterID = "twitter_id"
    }
}

enum SocialMedia: Int {
    case instagram
    case twitter
    case facebook
    case imdb
    
    var icon: UIImage? {
        switch self {
        case .instagram:
            return UIImage(named: "instagram_icon")
        case .twitter:
            return UIImage(named: "twitter_icon")
        case .facebook:
            return UIImage(named: "facebook_icon")
        case .imdb:
            return UIImage(named: "imdb_icon")
        }
    }
    
    func getUrl(by ids: ExternalIDS) -> URL? {
        
        switch self {
        case .instagram:
            guard let id = ids.instagramID else { return nil }
            return URL(string: "https://instagram.com/\(id)")!
        case .twitter:
            guard let id = ids.twitterID else { return nil }
            return URL(string: "https://twitter.com/\(id)")!
        case .facebook:
            guard let id = ids.facebookID else { return nil }
            return URL(string: "https://www.facebook.com/\(id)")!
        case .imdb:
            guard let id = ids.imdbID else { return nil }
            return URL(string: "https://www.imdb.com/name/\(id)")!
        }
    }
   
    
//    var url: URL {
//        switch self {
//        case .instagram(let accountName):
//            return URL(string: "https://instagram.com/\(accountName)")!
//        case .twitter(let accountName):
//            return URL(string: "https://twitter.com/\(accountName)")!
//        }
//    }
}
