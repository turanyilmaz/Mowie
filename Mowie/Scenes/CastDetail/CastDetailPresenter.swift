//
//  CastDetailPresenter.swift
//  Mowie
//
//  Created by Turan Yilmaz on 22.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CastDetailPresentationLogic: BasePresentationLogic {
    func presentCastDetail(response: CastDetail.GetCast.Response)
    func presentTitle(title: String?)
}

final class CastDetailPresenter: BasePresenter, CastDetailPresentationLogic {
    weak var viewController: CastDetailDisplayLogic?
    
    func presentCastDetail(response: CastDetail.GetCast.Response) {
        
        var sections = [ListViewSection]()
        
        
        let castDetailCellModel = CastDetailTVCellModel(imageURL: Utility.createImageUrl(with: response.profileImage.stringValue),
                                                        name: response.name,
                                                        birthDate: response.birthday,
                                                        homeTown: response.homeTown,
                                                        moviesCount: (response.movieCredits?.cast.count).stringValue,
                                                        tvsCount: (response.tvCredits?.cast.count).stringValue,
                                                        externalIds: response.externalIds)
        
        let castDetailSection = ListViewSection(items: [castDetailCellModel], cell: CastDetailTVCell.self)
        sections.append(castDetailSection)
        
        
        // Biography Section Model
        if let biography = response.biography, !biography.isEmpty {
            let overviewModel = OverviewTVCellModel(title: "Biography", overviewText: biography)
            let overviewSection = ListViewSection(items: [overviewModel], cell: OverviewTVCell.self)
            sections.append(overviewSection)
        }
        
        
        
        // Movie Section Model
        if !(response.movieCredits?.cast.isEmpty ?? true) {
            let movieItems = response.movieCredits?.cast.map { (movieItem) -> ItemCollectionViewCellModel in
                let yearString = Utility.getYearFromDateString(string: movieItem.releaseDate)
                
                return ItemCollectionViewCellModel(id: movieItem.id,
                                                   imageUrl: Utility.createImageUrl(with: movieItem.posterPath),
                                                   name: movieItem.title,
                                                   rate: movieItem.voteAverage,
                                                   year: yearString,
                                                   type: .movie)
            }
            
            let movieListViewModel = HorizontalListViewModel(items: movieItems,
                                                             itemCount: 3, cellAspectRatio: 1.5,
                                                             title: "Movies",
                                                             cell: ItemCollectionViewCell.self) { (selectedIndex) in
                
                guard let selectedMovie = movieItems?[selectedIndex] else {
                    return
                }
                
                let selectedItem = ItemDetail.SelectedItem(id: selectedMovie.id,
                                                           type: selectedMovie.type,
                                                           title: selectedMovie.name)
                
                self.viewController?.displayItemDetail(selectedItem: selectedItem)
            }
            
            let movieListCellViewModel = HorizontalListCellModel(horizontalListViewModel: movieListViewModel)
            
            let movieSection = ListViewSection(items: [movieListCellViewModel], cell: HorizontalListCell.self,
                                               cellHeight: .custom(height: 280))
            
            sections.append(movieSection)
        }
        
        // TV Section Model
        
        if !(response.tvCredits?.cast.isEmpty ?? true) {
            
            let tvItems = response.tvCredits?.cast.map { (tvItem) -> ItemCollectionViewCellModel in
                
                let yearString = Utility.getYearFromDateString(string: tvItem.firstAirDate)
                
                return ItemCollectionViewCellModel(id: tvItem.id,
                                                   imageUrl: Utility.createImageUrl(with: tvItem.posterPath),
                                                   name: tvItem.name,
                                                   rate: tvItem.voteAverage,
                                                   year: yearString,
                                                   type: .tv)
            }
            
            
            let tvListViewModel = HorizontalListViewModel(items: tvItems,
                                                          itemCount: 3, cellAspectRatio: 1.5,
                                                          title: "TV Series",
                                                          cell: ItemCollectionViewCell.self) { (selectedIndex) in
                
                guard let selectedTv = tvItems?[selectedIndex] else {
                    return
                }
                
                let selectedItem = ItemDetail.SelectedItem(id: selectedTv.id,
                                                           type: selectedTv.type,
                                                           title: selectedTv.name)
                
                self.viewController?.displayItemDetail(selectedItem: selectedItem)
            }
            
            let tvListModel = HorizontalListCellModel(horizontalListViewModel: tvListViewModel)
            
            
            
            
            let tvSection = ListViewSection(items: [tvListModel], cell: HorizontalListCell.self,
                                            cellHeight: .custom(height: 280))
            
            sections.append(tvSection)
        }
        
        
        
        let viewModel = CastDetail.GetCast.ViewModel(listViewModel: ListViewModel(sections: sections))
        
        viewController?.displayCastDetail(viewModel: viewModel)
    }
    
    func presentTitle(title: String?) {
        viewController?.displayTitle(title: title)
    }
}
