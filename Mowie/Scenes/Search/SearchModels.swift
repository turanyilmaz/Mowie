//
//  SearchModels.swift
//  Mowie
//
//  Created by Turan Yilmaz on 13.08.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Search {
    
    struct Request: RequestProtocol {
        var url: URL?
        
        init(searchType: SearchType, query: String, page: Int) {
            url = ServiceURL.search(searchType: searchType, query: query, page: page).url
        }
    }
    
    // Movie
    enum Movie {
        struct Request: RequestProtocol {
            var url: URL?
            
            init(query: String, page: Int) {
                url = ServiceURL.search(searchType: .movie, query: query, page: page).url
            }
        }
        
        struct Response: Codable {
            let page: Int?
            let results: [Items.Movie.MovieItem]
        }
        
        struct ViewModel: ListViewModelProtocol {
            let movies: [Items.Movie.MovieItem]
        }
    }
    
    // TV
    enum TV {
        struct Request: RequestProtocol {
            var url: URL?
            
            init(query: String, page: Int) {
                url = ServiceURL.search(searchType: .tv, query: query, page: page).url
            }
        }
        
        struct Response: Codable {
            let page: Int?
            let results: [Items.TV.TVItem]
        }
        
        struct ViewModel {
        }
    }
    
    // Person
    enum Person {
        struct Request: RequestProtocol {
            var url: URL?
            
            init(query: String, page: Int) {
                url = ServiceURL.search(searchType: .person, query: query, page: page).url
            }
        }
        
        struct Response: Codable {
            let page: Int?
            let results: [PersonItem]
        }
        
        struct ViewModel {
        }
        
        struct PersonItem: Codable {
            let id: Int?
            let profileImagePath: String?
            let name: String?
            let department: String?
            
            private enum CodingKeys: String, CodingKey {
                case id
                case name
                case profileImagePath = "profile_path"
                case department = "known_for_department"
            }
        }
    }
}
