//
//  SearchInteractor.swift
//  Mowie
//
//  Created by Turan Yilmaz on 13.08.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchBusinessLogic: BaseBusinessLogic {
    func getSearchResult(searchType: SearchType, query: String, page: Int)
    func showItemDetail(selectedItem: SearchTableViewCellModel)
    func showPersonDetail(selectedItem: SearchTableViewCellModel)
}

protocol SearchDataStore {
    var selectedItem: ItemDetail.SelectedItem? { get set }
    var selectedCast: CastDetail.SelectedCast? { get set }
}

final class SearchInteractor: BaseInteractor, SearchBusinessLogic, SearchDataStore {
    var presenter: SearchPresentationLogic?
    var worker: SearchWorker = SearchWorker(searchService: SearchService())
    
    var selectedItem: ItemDetail.SelectedItem?
    var selectedCast: CastDetail.SelectedCast?

    //MARK: Get Search Result
    
    func getSearchResult(searchType: SearchType, query: String, page: Int) {
        
        guard let encodedQuery = query.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) else {
            return
        }
                
        let request = Search.Request(searchType: searchType, query: encodedQuery, page: page)
        
        switch searchType {
        case .movie:
            getMovieResult(request: request)
        case .tv:
            getTVResult(request: request)
        case .person:
            getPersonResult(request: request)
        }
    }
    
    private func getMovieResult(request: Search.Request) {
        
        worker.getSearchResult(request: request) { (result: Result<Search.Movie.Response, APIError>) in
            switch result {
            case .success(let response):
                self.presenter?.presentMovieResult(response: response)
            case .failure(let error):
                self.showErrorAlert(error: error)
            }
        }
    }
    
    private func getTVResult(request: Search.Request) {
        
        worker.getSearchResult(request: request) { (result: Result<Search.TV.Response, APIError>) in
            switch result {
            case .success(let response):
                self.presenter?.presentTVResult(response: response)
            case .failure(let error):
                self.showErrorAlert(error: error)
            }
        }
    }
    
    private func getPersonResult(request: Search.Request) {
        
        worker.getSearchResult(request: request) { (result: Result<Search.Person.Response, APIError>) in
            switch result {
            case .success(let response):
                self.presenter?.presentPersonResult(response: response)
            case .failure(let error):
                self.showErrorAlert(error: error)
            }
        }
    }
    
    //MARK: Show Item Detail
    
    func showItemDetail(selectedItem: SearchTableViewCellModel) {
        
        var type: ItemType = .movie
        
        if selectedItem.resultType == .tv {
            type = .tv
        }
        
        let selectedItem = ItemDetail.SelectedItem(id: selectedItem.id,
                                                   type: type,
                                                   title: selectedItem.title)
        self.selectedItem = selectedItem
        presenter?.presentItemDetail()
    }
    
    func showPersonDetail(selectedItem: SearchTableViewCellModel) {
        self.selectedCast = CastDetail.SelectedCast(id: selectedItem.id, name: selectedItem.title)
        presenter?.presentPersonDetail()
    }
}
