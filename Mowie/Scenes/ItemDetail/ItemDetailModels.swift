//
//  ItemDetailModels.swift
//  Mowie
//
//  Created by Turan Yilmaz on 14.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum ItemDetail {
    // MARK: Use cases
    
    struct SelectedItem {
        let id: Int?
        let type: ItemType
        let title: String?
    }
    
//    enum Movie {
////        struct Request: RequestProtocol {
////            var url: URL?
////
////            init(movieId: Int) {
////                url = ServiceURL.movieDetail(movieId: movieId).url
////            }
////        }
//        
//        class Response: GetItemDetail.BaseItemResponse {
//           
//            var title: String?
//            var releaseDate: String?
//            var runtime: Int?
//            
//            private enum CodingKeys: String, CodingKey {
//                case id
//                case voteAverage = "vote_average"
//                case posterPath = "poster_path"
//                case title
//                case backdropPath
//                case overview
//                case releaseDate = "release_date"
//                case runtime
//                case language = "original_language"
//                case genres
//                case credits
//                case similar
//                case videos
//            }
//            
//            
//        }
//        
//        struct ViewModel {
//            let listViewModel: ListViewModel?
//        }
//    }
//    
//    enum TV {
////        class Request: GetItemDetail.BaseItemRequest {
////
////            override init(movieId: Int) {
////                url = ServiceURL.movieDetail(movieId: movieId).url
////            }
////        }
//        
//        class Response: GetItemDetail.BaseItemResponse {
//            
//            var name: String?
//            var firstAirDate: String?
//            
//            private enum CodingKeys: String, CodingKey {
//                case id
//                case voteAverage = "vote_average"
//                case posterPath = "poster_path"
//                case name
//                case backdropPath
//                case overview
//                case firstAirDate = "first_air_date"
//                case language = "original_language"
//                case genres
//                case credits
//                case similar
//                case videos
//            }
//        }
//        
//        struct ViewModel {
//            let listViewModel: ListViewModel?
//        }
//    }
    
    enum GetItemDetail {
        class BaseItemRequest: RequestProtocol {
            var url: URL?
            
            init(itemId: Int, itemType: ItemType?) {
                switch itemType {
                case .movie:
                    url = ServiceURL.movieDetail(movieId: itemId).url
                case .tv:
                    url = ServiceURL.tvDetail(tvId: itemId).url
                default:
                    url = nil
                }
            }
        }
        
        class BaseItemResponse: Codable {
            var id: Int?
            var voteAverage: Double?
            var posterPath: String?
            var backdropPath: String?
            var overview: String?
            var language: String?
            var genres: [Genres.Genre]?
            var credits: Credits?
            var recommendations: Recommendations?
            var videos: Videos?
            
            var title: String?
            var releaseDate: String?
            var runtime: Int?
            
            var name: String?
            var firstAirDate: String?
            var numberOfSeasons: Int?
            var aggregateCredits: Credits?
            
            var watchProviders: WatchProviders?
            
            private enum CodingKeys: String, CodingKey {
                case id
                case voteAverage = "vote_average"
                case posterPath = "poster_path"
                case backdropPath = "backdrop_path"
                case overview
                case language = "original_language"
                case genres
                case credits = "credits"
                case aggregateCredits = "aggregate_credits"
                case recommendations
                case videos
                case firstAirDate = "first_air_date"
                case releaseDate = "release_date"
                case runtime
                case title
                case name
                case watchProviders = "watch/providers"
                case numberOfSeasons = "number_of_seasons"
            }
            
            
        }
        
        struct ViewModel {
            let listViewModel: ListViewModel?
        }
    }
}


//MARK: Similar

struct Recommendations: Codable {
    let results: [RecommendItem]
}

struct RecommendItem: Codable {
    
    let id: Int?
    let title: String?
    let name: String?
    let posterPath: String?
    let voteAverage: Double?
    let releaseDate: String?
    let firstAirDate: String?
    
    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case name
        case posterPath = "poster_path"
        case voteAverage = "vote_average"
        case firstAirDate = "first_air_date"
        case releaseDate = "release_date"
    }
}

//MARK: Credits

struct Credits: Codable {
    let cast: [Cast]?
}

struct Cast: Codable {
    let castId: Int?
    let character: String?
    let creditId: String?
    let gender: Int?
    let id: Int?
    let name: String?
    let order: Int?
    let profilePath: String?
    let roles: [Role]?
    
    private enum CodingKeys: String, CodingKey {
        case castId
        case character
        case creditId = "credit_id"
        case gender
        case id
        case name
        case order
        case profilePath = "profile_path"
        case roles
    }
}

struct Role: Codable {
    let character: String?
}

//MARK: Videos

struct Videos: Codable {
    let results: [Video]
}

struct Video: Codable {
    let id: String?
    let key: String?
    let name: String?
    let type: String?
}

// MARK: - WatchProviders
struct WatchProviders: Codable {
    let results: [String: Provider]
}

// MARK: - Result
struct Provider: Codable {
    let link: String?
    let buy, flatrateAndBuy, flatrate, rent: [ProviderModel]?
    
    private enum CodingKeys: String, CodingKey {
        case link, buy
        case flatrateAndBuy = "flatrate_and_buy"
        case flatrate, rent
    }
}

struct ProviderModel: Codable {
    let displayPriority: Int?
    let logoPath: String?
    let providerID: Int?
    let providerName: String?

    enum CodingKeys: String, CodingKey {
        case displayPriority = "display_priority"
        case logoPath = "logo_path"
        case providerID = "provider_id"
        case providerName = "provider_name"
    }
}

