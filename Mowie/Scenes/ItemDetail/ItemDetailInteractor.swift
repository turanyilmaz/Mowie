//
//  ItemDetailInteractor.swift
//  Mowie
//
//  Created by Turan Yilmaz on 14.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemDetailBusinessLogic: BaseBusinessLogic {
    func getItemDetail()
    func setItemTitle()
    func showAddToListOptions()
    func showWatchProviders()
    func changeSelectedList(newList: ListType?)
}

protocol ItemDetailDataStore {
    var selectedCastId: Int? { get set }
    var selectedCastName: String? { get set }
    var selectedItem: ItemDetail.SelectedItem? { get set }
    var trailers: [Video]? { get set }
    var addToListDataModel: AddToList.DataModel? { get set }
    var selectedList: ListType? { get set }
    var watchProviders: WatchProviders? { get set }
}

final class ItemDetailInteractor: BaseInteractor, ItemDetailBusinessLogic, ItemDetailDataStore {
    var presenter: ItemDetailPresentationLogic?
    var worker: ItemDetailWorker = ItemDetailWorker(itemDetailService: ItemDetailService())
    
    var selectedCastId: Int?
    var selectedCastName: String?
    var selectedItem: ItemDetail.SelectedItem?
    var trailers: [Video]?
    var addToListDataModel: AddToList.DataModel?
    var selectedList: ListType?
    var watchProviders: WatchProviders?
    
    var response: ItemDetail.GetItemDetail.BaseItemResponse?
    
    func getItemDetail() {
        guard let selectedItem = selectedItem else {
            return
        }
        
        let request = ItemDetail.GetItemDetail.BaseItemRequest(itemId: (selectedItem.id).intValue,
                                                               itemType: selectedItem.type)
        
        worker.getItemDetail(request: request) { (result) in
            switch result {
            case .success(let response):
                
                self.response = response
                
                let selectedList = DatabaseManager.shared.getSelectedList(for: response.id)
                
                self.addToListDataModel = AddToList.DataModel(id: response.id,
                                                              posterPath: response.posterPath,
                                                              itemName: response.name ?? response.title,
                                                              year: Utility.getYearFromDateString(string: response.releaseDate ?? response.firstAirDate.stringValue),
                                                              rate: response.voteAverage,
                                                              type: selectedItem.type,
                                                              selectedList: selectedList)
                
                self.trailers = response.videos?.results
                self.watchProviders = response.watchProviders
                self.presenter?.presentItemDetail(response: response, itemType: selectedItem.type, selectedList: selectedList)
            case .failure(let error):
                self.showErrorAlert(error: error)
            }
        }
    }
    
    func setItemTitle() {
        presenter?.presentItemTitle(title: selectedItem?.title)
    }
    
    func showAddToListOptions() {
        presenter?.presentAddToListOptions()
    }
    
    func showWatchProviders() {
        presenter?.presentWatchProviders()
    }
    
    func changeSelectedList(newList: ListType?) {
        addToListDataModel?.selectedList = newList
        
        guard let response = response, let selectedItem = selectedItem else {
            return
        }

        presenter?.presentItemDetail(response: response, itemType: selectedItem.type, selectedList: newList)
    }
}
