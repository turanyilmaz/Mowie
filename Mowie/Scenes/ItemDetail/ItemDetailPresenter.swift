//
//  ItemDetailPresenter.swift
//  Mowie
//
//  Created by Turan Yilmaz on 14.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemDetailPresentationLogic: BasePresentationLogic {
    func presentItemDetail(response: ItemDetail.GetItemDetail.BaseItemResponse,
                           itemType: ItemType,
                           selectedList: ListType?)
    func presentItemTitle(title: String?)
    func presentAddToListOptions()
    func presentWatchProviders()
}

final class ItemDetailPresenter: BasePresenter, ItemDetailPresentationLogic {
    weak var viewController: ItemDetailDisplayLogic?
    
    func presentItemDetail(response: ItemDetail.GetItemDetail.BaseItemResponse,
                           itemType: ItemType,
                           selectedList: ListType?) {
        
        var sections = [ListViewSection]()
        
        // Item Detail Section Model
        
        var itemDetailModel: ItemDetailTVCellModel!
        
        let yearString = Utility.getYearFromDateString(string: (response.releaseDate ?? response.firstAirDate))
        
        var backdropImageUrl: URL?
        
        if let backdropPath = response.backdropPath {
            backdropImageUrl = URL(string: Constants.backdropBaseUrl + backdropPath)
        }
        
        let runtimeText = itemType == .movie ? (response.runtime).stringValue + " min" : response.numberOfSeasons.stringValue + " seasons"
        
        itemDetailModel = ItemDetailTVCellModel(voteAverage: (response.voteAverage).stringValue,
                                                posterImageUrl: Utility.createImageUrl(with: response.posterPath),
                                                title: response.title ?? response.name,
                                                releaseDate: yearString,
                                                numberOfSeason: response.numberOfSeasons,
                                                runtime: runtimeText,
                                                language: response.language,
                                                genres: Utility.createGenresText(with: response.genres),
                                                backdropImageUrl: backdropImageUrl,
                                                selectedList: selectedList,
                                                hidePlayTrailerButton: Utility.parseForTrailerVideo(videos: response.videos?.results) == nil,
                                                trailerButtonTappedCallback: viewController?.trailerButtonTappedCallback)
        
        let itemDetailSection = ListViewSection(items: [itemDetailModel], cell: ItemDetailTVCell.self)
        sections.append(itemDetailSection)
        
        
        // Add to List Button
        var buttonTitle = "Add to List"
        
        if selectedList != nil {
            buttonTitle = "Remove from List"
        }
        
        let buttonModel = AddToListButtonTVCellModel(title: buttonTitle,
                                                     addButtonTappedCallback: viewController?.addToListButtonTappedCallback,
                                                     watchButtonTappedCallback: viewController?.watchButtonTappedCallback)
        
        let addToListButtonSection = ListViewSection(items: [buttonModel], cell: AddToListButtonTVCell.self)
        sections.append(addToListButtonSection)
        
        
        // Overview Section Model
        if let overview = response.overview, !overview.isEmpty {
            let overviewModel = OverviewTVCellModel(title: "Overview", overviewText: response.overview)
            let overviewSection = ListViewSection(items: [overviewModel], cell: OverviewTVCell.self)
            sections.append(overviewSection)
        }
        
        
        // Cast Section Model
        
        let credits = response.credits ?? response.aggregateCredits
        
        if let cast = credits?.cast, !cast.isEmpty {
            let castItems = cast.map({ (cast) -> CastCVCellModel in
                let castCVModel = CastCVCellModel(id: cast.id,
                                                  imageUrl: Utility.createImageUrl(with: cast.profilePath.stringValue),
                                                  name: cast.name)
                return castCVModel
            })
            
            
            let castListViewModel = HorizontalListViewModel(items: castItems,
                                                            itemCount: 4,
                                                            cellAspectRatio: 2.0,
                                                            title: "Cast",
                                                            cell: CastCVCell.self) { (selectedIndex) in
                let selectedCast = castItems[selectedIndex]
                self.viewController?.displayCastDetail(with: (selectedCast.id).intValue,
                                                       and: (selectedCast.name).stringValue)
            }
            
            let castModel = HorizontalListCellModel(horizontalListViewModel: castListViewModel)
            
            let castSection = ListViewSection(items: [castModel], cell: HorizontalListCell.self,
                                              cellHeight: .custom(height: 270))
            sections.append(castSection)
        }
        
        
        // Recommendations Section Model
        
        if let recommendations = response.recommendations?.results, !recommendations.isEmpty {
            let recommendItems = recommendations.map { (recommend) -> ItemCollectionViewCellModel in
                
                let yearString = Utility.getYearFromDateString(string: (recommend.releaseDate ?? recommend.firstAirDate).stringValue)
                
                let recommendationsCVModel = ItemCollectionViewCellModel(id: recommend.id,
                                                                 imageUrl: Utility.createImageUrl(with: recommend.posterPath.stringValue),
                                                                 name: recommend.title ?? recommend.name,
                                                                 rate: recommend.voteAverage,
                                                                 year: yearString,
                                                                 type: itemType)
                return recommendationsCVModel
            }
            
            
            let recommendListViewModel = HorizontalListViewModel(items: recommendItems,
                                                                 itemCount: 3,
                                                                 cellAspectRatio: 1.5,
                                                                 title: "Recommendations",
                                                                 cell: ItemCollectionViewCell.self) { (selectedIndex) in
                
                let selectedRecommend = recommendItems[selectedIndex]
                
                let selectedItem = ItemDetail.SelectedItem(id: selectedRecommend.id,
                                                           type: selectedRecommend.type,
                                                           title: selectedRecommend.name)
                
                self.viewController?.displayRecommendItemDetail(selectedItem: selectedItem)
            }
            
            let recommendModel = HorizontalListCellModel(horizontalListViewModel: recommendListViewModel)
            let recommendsSection = ListViewSection(items: [recommendModel], cell: HorizontalListCell.self,
                                                    cellHeight: .custom(height: 280))
            
            sections.append(recommendsSection)
        }
        
        // Creating Sections
        
        let viewModel = ItemDetail.GetItemDetail.ViewModel(listViewModel: ListViewModel(sections: sections))
        
        viewController?.displayItemDetail(viewModel: viewModel, selectedList: selectedList)
    }
    
    func presentItemTitle(title: String?) {
        viewController?.displayItemTitle(title: title)
    }
    
    func presentAddToListOptions() {
        viewController?.displayAddToListOptions()
    }
    
    func presentWatchProviders() {
        viewController?.displayWatchProviders()
    }
}
