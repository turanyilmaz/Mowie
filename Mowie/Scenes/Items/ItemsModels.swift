//
//  ItemsModels.swift
//  Mowie
//
//  Created by Turan Yilmaz on 8.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Items {
    // MARK: Use cases
    
    enum Movie {
        struct Request: RequestProtocol {
            var url: URL?
            
            init(page: Int, itemListType: ItemListType) {
                if case ItemListType.movie(let itemListType) = itemListType {
                    switch itemListType {
                    case .category(let category):
                        url = ServiceURL.movieListByCategory(category: category.value, page: page).url
                    case .genre(let genreId):
                        url = ServiceURL.movieListByGenre(genreId: genreId, page: page).url
                    }
                }
            }
        }
        
        struct Response: Codable {
            let results: [MovieItem]
        }
        
        struct MovieItem: Codable {
            let id: Int?
            let title: String?
            let posterPath: String?
            let voteAverage: Double?
            let releaseDate: String?
            
            enum CodingKeys: String, CodingKey {
                case id
                case title
                case posterPath = "poster_path"
                case voteAverage = "vote_average"
                case releaseDate = "release_date"
            }
        }
    }
    
    enum TV {
        struct Request: RequestProtocol {
            var url: URL?
            
            init(page: Int, itemListType: ItemListType) {
                if case ItemListType.tv(let itemListType) = itemListType {
                    switch itemListType {
                    case .category(let category):
                        url = ServiceURL.tvListByCategory(category: category.value, page: page).url
                    case .genre(let genreId):
                        url = ServiceURL.tvListByGenre(genreId: genreId, page: page).url
                    }
                }
            }
        }
        
        struct Response: Codable {
            let results: [TVItem]
        }
        
        struct TVItem: Codable {
            let id: Int?
            let name: String?
            let posterPath: String?
            let voteAverage: Double?
            let firstAirDate: String?
            
            enum CodingKeys: String, CodingKey {
                case id
                case name
                case posterPath = "poster_path"
                case voteAverage = "vote_average"
                case firstAirDate = "first_air_date"
            }
        }
    }
    
    struct ViewModel {
        let id: Int?
        let name: String?
        let year: String?
        let rate: String?
        let thumbnailImageUrl: URL?
    }
    
    enum GetItems {
        struct Request {
            var url: URL?
            
            init(page: Int, itemListType: ItemListType) {
                
                switch itemListType {
                case .movie(let type):
                    if case let ItemsBy.category(category) = type {
                        url = ServiceURL.movieListByCategory(category: category.value, page: page).url
                    } else if case let ItemsBy.genre(genreId) = type {
                        url = ServiceURL.movieListByGenre(genreId: genreId, page: page).url
                    }
                case .tv(let type):
                    if case let ItemsBy.category(category) = type {
                        url = ServiceURL.tvListByCategory(category: category.value, page: page).url
                    } else if case let ItemsBy.genre(genreId) = type {
                        url = ServiceURL.tvListByGenre(genreId: genreId, page: page).url
                    }
                }
                
            }
        }
        
        struct Response {
            
        }
        
        struct ViewModel {
        }
    }
}

//enum ItemListType {
//    case movie(MovieItemsBy)
//    case tv(TVItemsBy)
//}
//
//enum MovieItemsBy {
//    case category(MovieCategory)
//    case genre(Int)
//}
//
//enum TVItemsBy {
//    case category(TVCategory)
//    case genre(Int)
//}
//
//enum MovieCategory: String {
//    case popular = "popular"
//    case topRated = "top_rated"
//    case nowPlaying = "now_playing"
//    case upComing = "upcoming"
//
//    var title: String {
//        switch self {
//        case .popular:
//            return "POPULAR"
//        case .topRated:
//            return "TOP RATED"
//        case .nowPlaying:
//            return "NOW PLAYING"
//        case .upComing:
//            return "UPCOMING"
//        }
//    }
//}
//
//enum TVCategory: String {
//    case popular = "popular"
//    case topRated = "top_rated"
//    case airingToday = "airing_today"
//    case onTheAir = "on_the_air"
//
//    var title: String {
//        switch self {
//        case .popular:
//            return "POPULAR"
//        case .topRated:
//            return "TOP RATED"
//        case .airingToday:
//            return "AIRING TODAY"
//        case .onTheAir:
//            return "ON THE AIR"
//        }
//    }
//}


enum ItemListType {
    case movie(ItemsBy)
    case tv(ItemsBy)
}

enum ItemsBy {
    case category(CategoryProtocol)
    case genre(Int)
}

enum MovieCategory: String, CategoryProtocol {
    case popular = "popular"
    case topRated = "top_rated"
    case nowPlaying = "now_playing"
    case upComing = "upcoming"
    
    var value: String {
        return self.rawValue
    }
    
    var title: String {
        switch self {
        case .popular:
            return "POPULAR"
        case .topRated:
            return "TOP RATED"
        case .nowPlaying:
            return "NOW PLAYING"
        case .upComing:
            return "UPCOMING"
        }
    }
}

enum TVCategory: String, CategoryProtocol {
    case popular = "popular"
    case topRated = "top_rated"
    case airingToday = "airing_today"
    case onTheAir = "on_the_air"
    
    var value: String {
        return self.rawValue
    }
    
    var title: String {
        switch self {
        case .popular:
            return "POPULAR"
        case .topRated:
            return "TOP RATED"
        case .airingToday:
            return "AIRING TODAY"
        case .onTheAir:
            return "ON THE AIR"
        }
    }
}

protocol CategoryProtocol {
    var title: String { get }
    var value: String { get }
}
