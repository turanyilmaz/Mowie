//
//  ItemsViewController.swift
//  Mowie
//
//  Created by Turan Yilmaz on 8.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemsDisplayLogic: BaseDisplayLogic {
    func displayItems(viewModel: [ItemCollectionViewCellModel])
    func displayItemDetail()
}

final class ItemsViewController: BaseViewController, ItemsDisplayLogic {
    var interactor: ItemsBusinessLogic?
    var router: (NSObjectProtocol & ItemsRoutingLogic & ItemsDataPassing)?
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    private var isLoading: Bool = false
    private var items: [ItemCollectionViewCellModel] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ItemsInteractor()
        let presenter = ItemsPresenter()
        let router = ItemsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        interactor.basePresenter = presenter
        presenter.baseViewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = router?.dataStore?.title
        getItemList()
    }
    
    private func getItemList() {
        interactor?.getItems()
    }
    
    func displayItems(viewModel: [ItemCollectionViewCellModel]) {
        isLoading = false
        items.append(contentsOf: viewModel)
        collectionView.register(UINib(nibName: "ItemCollectionViewCell", bundle: Bundle.main),
                                forCellWithReuseIdentifier: ItemCollectionViewCell.cellIdentifier)
        collectionView.reloadData()
    }
    
    func displayItemDetail() {
        router?.routeToItemDetail()
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offset = scrollView.contentOffset.y
        let dd = (scrollView.contentSize.height - scrollView.frame.size.height) - 60
        if dd > 0, offset >= dd, !isLoading  {
            isLoading = true
            getItemList()
        }
    }
}

extension ItemsViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return items.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let item = items[indexPath.row]
        
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ItemCollectionViewCell.cellIdentifier,
                                                            for: indexPath) as? ItemCollectionViewCell else {
            return UICollectionViewCell()
        }
        
        cell.configure(with: item)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let item = items[indexPath.row]
        
        let selectedItem = ItemDetail.SelectedItem(id: item.id, type: item.type, title: item.name)
        
        interactor?.showItemDetail(selectedItem: selectedItem)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = ((collectionView.frame.size.width - 10) / 3).rounded(.down)
        let height = width * 1.6
        
        return CGSize(width: width, height: height)
    }
}

extension ItemsViewController: Instantiable {
    static var storyboardName: String {
        return "Items"
    }
}
