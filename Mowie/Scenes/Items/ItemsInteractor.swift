//
//  ItemsInteractor.swift
//  Mowie
//
//  Created by Turan Yilmaz on 8.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ItemsBusinessLogic: BaseBusinessLogic {
    func getItems()
    func showItemDetail(selectedItem: ItemDetail.SelectedItem?)
}

protocol ItemsDataStore {
    var selectedItem: ItemDetail.SelectedItem? { get set }
    var itemListType: ItemListType { get set }
    var title: String? { get set }
}

final class ItemsInteractor: BaseInteractor, ItemsBusinessLogic, ItemsDataStore {
    var presenter: ItemsPresentationLogic?
    var worker: ItemsWorker = ItemsWorker(itemService: ItemsService())
    
    var selectedItem: ItemDetail.SelectedItem?
    var itemListType: ItemListType = .movie(.category(MovieCategory.popular))
    private var currentPage: Int = 0
    var title: String?
    
    func getItems() {
        
        currentPage += 1
        
        switch itemListType {
        case .movie:
            getMovieItems()
        case .tv:
            getTVItems()
        }
    }
    
    func getMovieItems() {
        
        let request = Items.Movie.Request(page: currentPage, itemListType: itemListType)
        
        worker.getMovieItems(request: request) { (result) in
            switch result {
            case .success(let response):
                self.presenter?.presentMovieItems(response: response)
            case .failure(let error):
                self.showErrorAlert(error: error)
            }
        }
    }
    
    func getTVItems() {
        
        let request = Items.TV.Request(page: currentPage, itemListType: itemListType)
        
        worker.getTVItems(request: request) { (result) in
            switch result {
            case .success(let response):
                self.presenter?.presentTVItems(response: response)
            case .failure(let error):
                self.showErrorAlert(error: error)
            }
        }
    }
    
    func showItemDetail(selectedItem: ItemDetail.SelectedItem?) {
        self.selectedItem = selectedItem
        presenter?.presentItemDetail()
    }
}
