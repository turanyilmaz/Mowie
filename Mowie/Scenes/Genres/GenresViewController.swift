//
//  GenresViewController.swift
//  Mowie
//
//  Created by Turan Yilmaz on 7.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GenresDisplayLogic: BaseDisplayLogic {
    func displayGenreList(viewModel: [Genres.GetGenres.ViewModel])
}

final class GenresViewController: BaseViewController, GenresDisplayLogic {
    var interactor: GenresBusinessLogic?
    var router: (NSObjectProtocol & GenresRoutingLogic & GenresDataPassing)?
    
    var genreListType: ItemType = .movie
    
    @IBOutlet weak var listView: ListView!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = GenresInteractor()
        let presenter = GenresPresenter()
        let router = GenresRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        interactor.basePresenter = presenter
        presenter.baseViewController = viewController
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        interactor?.getGenres(for: genreListType)
    }
    
    //MARK - Display Logic
   
    func displayGenreList(viewModel: [Genres.GetGenres.ViewModel]) {
        listView.viewModel = ListViewModel(sections: [ListViewSection(items: viewModel, cell: GenresTableViewCell.self)])
        listView.didSelectCallback = genreDidSelect(selectedGenre:)
    }
    
    func genreDidSelect(selectedGenre: ListViewModelProtocol) {
        
        guard let selectedGenre = selectedGenre as? Genres.GetGenres.ViewModel else {
            return
        }
        
        if genreListType == .movie {
            interactor?.setItemListTypeAndGenreName(type: .movie(.genre(selectedGenre.id)),
                                                    genreName: selectedGenre.name)
        } else {
            interactor?.setItemListTypeAndGenreName(type: .tv(.genre(selectedGenre.id)),
                                                    genreName: selectedGenre.name)
        }
        
        router?.routeToItems()
    }
}

extension GenresViewController: Instantiable {
    static var storyboardName: String {
        return "Genres"
    }
}
