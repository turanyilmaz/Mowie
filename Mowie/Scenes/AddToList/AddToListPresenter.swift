//
//  AddToListPresenter.swift
//  Mowie
//
//  Created by Turan Yilmaz on 24.08.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddToListPresentationLogic {
    func presentOptions(with addToListDataModel: AddToList.DataModel?)
    func presentSavedItemState(for list: ListType, action: ListAction)
}

final class AddToListPresenter: AddToListPresentationLogic {
    weak var viewController: AddToListDisplayLogic?
    
    func presentOptions(with addToListDataModel: AddToList.DataModel?) {
        
        var listOptionViewModels = [ListOptionViewModel]()
        
        if let selectedList = addToListDataModel?.selectedList {
            
            switch selectedList {
            case .toWatch:
                let moveOption1 = ListOptionViewModel(list: .watched, action: .move)
                let moveOption2 = ListOptionViewModel(list: .favourite, action: .move)
                listOptionViewModels.append(contentsOf: [moveOption1, moveOption2])
            case .watched:
                let moveOption1 = ListOptionViewModel(list: .toWatch, action: .move)
                let moveOption2 = ListOptionViewModel(list: .favourite, action: .move)
                listOptionViewModels.append(contentsOf: [moveOption1, moveOption2])
            case .favourite:
                let moveOption1 = ListOptionViewModel(list: .toWatch, action: .move)
                let moveOption2 = ListOptionViewModel(list: .watched, action: .move)
                listOptionViewModels.append(contentsOf: [moveOption1, moveOption2])
            }
            
            let removeOption = ListOptionViewModel(list: selectedList, action: .remove)
            
            listOptionViewModels.insert(removeOption, at: 0)
            
        } else {
            let addOption1 = ListOptionViewModel(list: .toWatch, action: .add)
            let addOption2 = ListOptionViewModel(list: .watched, action: .add)
            let addOption3 = ListOptionViewModel(list: .favourite, action: .add)
            
            listOptionViewModels.append(contentsOf: [addOption1, addOption2, addOption3])
        }
        
        var drawerTitle = "Add to List"
        
        if let selectedList = addToListDataModel?.selectedList {
            drawerTitle = "Remove from \(selectedList.rawValue)"
        }
        
        viewController?.displayOptions(viewModel: AddToList.ViewModel(viewModel: listOptionViewModels,
                                                                      posterImageUrl: Utility.createImageUrl(with: (addToListDataModel?.posterPath).stringValue),
                                                                      itemName: addToListDataModel?.itemName,
                                                                      drawerTitle: drawerTitle))
    }
    
    func presentSavedItemState(for list: ListType, action: ListAction) {
        viewController?.displaySavedItemState(for: list, action: action)
    }
}
